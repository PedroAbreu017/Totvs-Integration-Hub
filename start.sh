#!/bin/bash

# TOTVS Integration Hub - Script de Inicializa√ß√£o
echo "üöÄ TOTVS Integration Hub - Startup Script"
echo "=========================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para logs coloridos
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar pr√©-requisitos
check_prerequisites() {
    log_info "Verificando pr√©-requisitos..."
    
    # Verificar Java 17
    if command -v java &> /dev/null; then
        JAVA_VERSION=$(java -version 2>&1 | head -n1 | cut -d'"' -f2 | cut -d'.' -f1)
        if [ "$JAVA_VERSION" -ge "17" ]; then
            log_success "Java $JAVA_VERSION encontrado"
        else
            log_error "Java 17+ √© necess√°rio. Vers√£o atual: $JAVA_VERSION"
            exit 1
        fi
    else
        log_error "Java n√£o encontrado. Instale Java 17+"
        exit 1
    fi
    
    # Verificar Maven
    if command -v mvn &> /dev/null; then
        MVN_VERSION=$(mvn -version 2>&1 | head -n1 | cut -d' ' -f3)
        log_success "Maven $MVN_VERSION encontrado"
    else
        log_error "Maven n√£o encontrado. Instale Maven 3.9+"
        exit 1
    fi
    
    # Verificar Docker
    if command -v docker &> /dev/null; then
        DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
        log_success "Docker $DOCKER_VERSION encontrado"
    else
        log_error "Docker n√£o encontrado. Instale Docker"
        exit 1
    fi
    
    # Verificar Docker Compose
    if command -v docker-compose &> /dev/null; then
        COMPOSE_VERSION=$(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)
        log_success "Docker Compose $COMPOSE_VERSION encontrado"
    else
        log_error "Docker Compose n√£o encontrado"
        exit 1
    fi
}

# Fun√ß√£o para setup da infraestrutura
setup_infrastructure() {
    log_info "Configurando infraestrutura..."
    
    # Parar containers existentes
    log_info "Parando containers existentes..."
    docker-compose down 2>/dev/null || true
    
    # Iniciar MongoDB e Redis
    log_info "Iniciando MongoDB e Redis..."
    docker-compose up -d mongodb redis
    
    # Aguardar containers estarem prontos
    log_info "Aguardando containers ficarem prontos..."
    sleep 15
    
    # Verificar MongoDB
    log_info "Verificando MongoDB..."
    for i in {1..30}; do
        if docker-compose exec -T mongodb mongosh --eval "db.adminCommand('ping')" &>/dev/null; then
            log_success "MongoDB est√° pronto"
            break
        fi
        if [ $i -eq 30 ]; then
            log_error "MongoDB n√£o respondeu ap√≥s 30 tentativas"
            exit 1
        fi
        sleep 2
    done
    
    # Verificar Redis
    log_info "Verificando Redis..."
    for i in {1..30}; do
        if docker-compose exec -T redis redis-cli -a redis123 ping | grep -q PONG; then
            log_success "Redis est√° pronto"
            break
        fi
        if [ $i -eq 30 ]; then
            log_error "Redis n√£o respondeu ap√≥s 30 tentativas"
            exit 1
        fi
        sleep 2
    done
}

# Fun√ß√£o para build da aplica√ß√£o
build_application() {
    log_info "Fazendo build da aplica√ß√£o..."
    
    # Limpar target anterior
    log_info "Limpando build anterior..."
    mvn clean -q
    
    # Compilar aplica√ß√£o
    log_info "Compilando aplica√ß√£o..."
    if mvn compile -q; then
        log_success "Compila√ß√£o conclu√≠da"
    else
        log_error "Erro na compila√ß√£o"
        exit 1
    fi
}

# Fun√ß√£o para executar aplica√ß√£o
run_application() {
    log_info "Iniciando aplica√ß√£o..."
    
    # Configurar vari√°veis de ambiente
    export SPRING_PROFILES_ACTIVE=dev
    export JAVA_OPTS="-Xmx512m -Xms256m"
    
    # Executar aplica√ß√£o
    log_success "üéâ Iniciando TOTVS Integration Hub..."
    echo ""
    echo "üìç URLs importantes:"
    echo "   ‚Ä¢ Aplica√ß√£o: http://localhost:8080/api"
    echo "   ‚Ä¢ Health Check: http://localhost:8080/api/v1/health"
    echo "   ‚Ä¢ Swagger UI: http://localhost:8080/api/swagger-ui.html"
    echo "   ‚Ä¢ Tipos Conectores: http://localhost:8080/api/connectors/types"
    echo "   ‚Ä¢ MongoDB: mongodb://admin:password123@localhost:27017"
    echo "   ‚Ä¢ Redis: redis://localhost:6379 (senha: redis123)"
    echo ""
    echo "üõë Para parar: Ctrl+C"
    echo ""
    
    # Executar com Spring Boot
    mvn spring-boot:run
}

# Fun√ß√£o para executar testes funcionais
run_functional_tests() {
    log_info "Executando testes funcionais..."
    
    if [ -f "run-tests.py" ]; then
        python3 run-tests.py --url http://localhost:8080/api
    else
        log_warning "Script de testes funcionais n√£o encontrado"
    fi
}

# Fun√ß√£o de limpeza
cleanup() {
    log_info "Fazendo limpeza..."
    docker-compose down
    log_success "Limpeza conclu√≠da"
}

# Fun√ß√£o principal
main() {
    echo "üéØ Escolha uma op√ß√£o:"
    echo "1) Setup completo (infra + build + run)"
    echo "2) Apenas infraestrutura"
    echo "3) Apenas build"
    echo "4) Apenas executar"
    echo "5) Testes funcionais"
    echo "6) Limpeza"
    echo "0) Sair"
    echo ""
    read -p "Op√ß√£o: " choice
    
    case $choice in
        1)
            check_prerequisites
            setup_infrastructure
            build_application
            run_application
            ;;
        2)
            check_prerequisites
            setup_infrastructure
            ;;
        3)
            check_prerequisites
            build_application
            ;;
        4)
            run_application
            ;;
        5)
            run_functional_tests
            ;;
        6)
            cleanup
            ;;
        0)
            log_info "Saindo..."
            exit 0
            ;;
        *)
            log_error "Op√ß√£o inv√°lida"
            exit 1
            ;;
    esac
}

# Trap para limpeza em caso de interrup√ß√£o
trap cleanup EXIT

# Executar fun√ß√£o principal
main